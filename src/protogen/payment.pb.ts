// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v5.29.3
// source: payment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "payment";

export enum PaymentProvider {
  UNKNOWN = 0,
  ZALOPAY = 1,
  PAYOS = 2,
  VNPAY = 3,
  UNRECOGNIZED = -1,
}

export enum PaymentStatus {
  PENDING = 0,
  COMPLETED = 1,
  FAILED = 2,
  CANCELED = 3,
  UNRECOGNIZED = -1,
}

export interface CreatePaymentIntentRequest {
  orderCode: string;
  amountCents: number;
  currency: string;
  provider: PaymentProvider;
  idempotencyKey: string;
  redirectUrl: string;
  timeoutSeconds: number;
}

export interface CreatePaymentIntentResponse {
  paymentUrl: string;
}

export interface ConfirmPaymentIntentRequest {
  paymentId: string;
}

export interface ConfirmPaymentIntentResponse {
  paymentId: string;
  status: PaymentStatus;
}

export interface CancelPaymentIntentRequest {
  paymentId: string;
}

export interface CancelPaymentIntentResponse {
  paymentId: string;
  status: PaymentStatus;
}

export const PAYMENT_PACKAGE_NAME = "payment";

export interface PaymentServiceClient {
  createPaymentIntent(request: CreatePaymentIntentRequest): Observable<CreatePaymentIntentResponse>;

  confirmPaymentIntent(request: ConfirmPaymentIntentRequest): Observable<ConfirmPaymentIntentResponse>;

  cancelPaymentIntent(request: CancelPaymentIntentRequest): Observable<CancelPaymentIntentResponse>;
}

export interface PaymentServiceController {
  createPaymentIntent(
    request: CreatePaymentIntentRequest,
  ): Promise<CreatePaymentIntentResponse> | Observable<CreatePaymentIntentResponse> | CreatePaymentIntentResponse;

  confirmPaymentIntent(
    request: ConfirmPaymentIntentRequest,
  ): Promise<ConfirmPaymentIntentResponse> | Observable<ConfirmPaymentIntentResponse> | ConfirmPaymentIntentResponse;

  cancelPaymentIntent(
    request: CancelPaymentIntentRequest,
  ): Promise<CancelPaymentIntentResponse> | Observable<CancelPaymentIntentResponse> | CancelPaymentIntentResponse;
}

export function PaymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createPaymentIntent", "confirmPaymentIntent", "cancelPaymentIntent"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("PaymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PAYMENT_SERVICE_NAME = "PaymentService";
